1) Le commit create in una repository locale, vengono sincronizzate
automaticamente con la repository online collegata?

FALSO

2) Qual è il nuovo nome standard del branch principale utilizzato come
convenzione in GIT?

MAIN

3) Come descriveresti il workflow dei comandi di GIT?

GIT ADD -> GIT COMMIT -> GIT PUSH

4) Qual è il comando da utilizzare per vedere l’elenco di tutte le commit del
branch in cui ci si trova e i loro hashcode?

git log

5) Scrivi il comando per effettuare il rollback ad una commit precedente

git reset --hard [hash code della commit a cui si vuole ritornare]

6) Scrivi due motivazioni per giustificare l’utilizzo di GIT

- Tenere traccia delle modifiche fatte al codice grazie al branching
- Poter lavorare più facilmente in team su un progetto complesso

7) Spiega la differenza tra git clone e git pull.

git clone permette appunto di clonare una repository GIA' PRESENTE online, in locale. Alla repository clonata in locale non servirà nè inizializzarla come repository e nemmeno collegare l'origine online dato che viene automaticamente fatto da GitHub.

git pull invece serve SOLO ad AGGIORNARE LE MODIFICHE della repository locale, prendendo quelle più recenti da quella presente su GitHub, questo è utile quando si lavora in più persone ad un progetto e si ha necessità di aggiornare le modifiche in locale.

quindi git clone prende la repository online e la "duplica" in locale quando ancora non c'era, con git pull è necessario che in locale la repository sia già presente e inizializzata come repository git.

8) Descrivi cosa sono i rami di sviluppo in GIT (branches). Spiega inoltre come si
creano, come ci si sposta in un ramo esistente, come si uniscono le modifiche
di un ramo in un altro e come vedere il ramo corrente, attenendoti ai comandi
visti in classe.

I rami di sviluppo (branch) sono dei rami del nostro progetto e servono per poter modificare il codice in modo sicuro, senza andare a modificare il codice stabile e ufficiale presente nel ramo principale (main). Modificando sempre il codice nel main si rischia di rovinare il codice che prima era funzionante, dovendo ricominciare da zero. Invece se il codice creato in un altro ramo non dovesse funzionare, possiamo cancellaro, oppure ricominciare da quello presente nel main, se invece dovesse funzionare, possiamo procedere a fondere (merge) il ramo secondario con quello principale, e dichiarare stabile il nostro codice.

Per creare un nuovo branch usiamo il comando "git checkout -b [nome branch]"
Per spostarsi tra i vari rami usiamo il comando "git checkout [nome branch]"
Per unire le modifiche di due rami andiamo innanzitutto nel ramo in cui vogliamo unire le modifiche, successivamente usiamo il comando "git merge [nome branch da unire]" e le modifiche saranno applicate.
Per visualizzare il ramo corrente usiamo il comando "git status".

9) Spiega di cosa si occupa l’ingegneria del software

L'ingegneria del software è tutta quella parte dell'informatica legata alla progettazione, produzione, riutilizzo e manutenzione degli applicativi al fine di ridurre i costi di finanziamento del software e aumentarne la qualità.

10) Spiega cosa è il ciclo di vita del software e le fasi in cui si suddivide

Il ciclo di vita del software accompagna il software durante tutto il tempo che è attivo, dal momento in cui viene pensato, al momento in cui viene eliminato perché non più utilizzato. Le fasi del ciclo di vita del software sono 5 (alcune divise in sottofasi):

- ANALISI
Questa è sicuramente la parte più importante, bisogna analizzare molto dettagliatamente il progetto e assegnare ad ogni attore una parte di lavoro da eseguire. Senza un'analisi accuratamente documentata e dettagliata non si riuscirà a realizzare un progetto complesso che coinvolge differenti figure professionali.

Abbiamo 6 sottofasi nella fase di analisi:
-- Fattibilità
Bisogna verificare se il progetto è realizzabile, sia dal punto di vista economico che tecnico.
-- Requisiti
Bisogna verificare i vincoli posti dal sistema.
-- Interfaccia utente
-- Architettura del sistema
-- Dati da utilizzare
-- Test da eseguire per verificare il corretto funzionamento del sistema.

- PROGETTAZIONE
Si analizza il progetto nei minimi dettagli, dai macro-argomenti fino all'implementazione di semplici variabili.
Abbiamo 2 sottofasi nella fase di progettazione:
-- Architettura di progetto
Dove vengono definite le componenti software
-- Disegno di dettaglio
Dove viene descritto come le componenti software vengono implementate.

- REALIZZAZIONE
Si traduce il progetto in codice scritto in uno (o più) linguaggi di programmazione e si procede alla sua implementazione.

- AVVIO IN PRODUZIONE
Finiti i test interni, il software viene consegnato al cliente, e collaudato insieme ad esso. Dopodiché il software entra in produzione, ovvero quando il cliente inizia concretamente ad utilizzarlo.

- MANUTENZIONE
Per garantire l'efficienza nel tempo del software, bisogna mantenerlo aggiornato.
Abbiamo tre tipi di manutenzione:

-- Manutenzione correttiva
Questa si verifica quando c'è un malfunzionamento all'interno del software, ed è necessario l'intervento della compagnia per ripararlo.

-- Manutenzione adattiva
Questa è dovuta a fattori esterni, il software viene modificato per adattarsi a delle mutazioni legislative, fiscali o sociali.

-- Manutenzione evolutiva
Questa è dovuta a esigenze del cliente, che richiede alla compagnia un aggiornamento del software, perché necessita di una funzione in più.
